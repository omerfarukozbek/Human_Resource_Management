// <auto-generated />
using System;
using HR_T3.Context.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HR_T3.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221230133122_new")]
    partial class @new
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HR_T3.Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Bilge Adam Ankara",
                            CreateDate = new DateTime(2022, 12, 30, 16, 31, 22, 177, DateTimeKind.Local).AddTicks(7843),
                            Name = "Bilge Adam Boost Team 3",
                            UpdatedDate = new DateTime(2022, 12, 30, 16, 31, 22, 177, DateTimeKind.Local).AddTicks(7852)
                        });
                });

            modelBuilder.Entity("HR_T3.Domain.Entities.Cost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Damage")
                        .HasColumnType("float");

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ReplyDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TypeOfCost")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Costs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApprovalStatus = 1,
                            CreateDate = new DateTime(2022, 12, 30, 16, 31, 22, 187, DateTimeKind.Local).AddTicks(9959),
                            Damage = 500.0,
                            PersonId = "59323082792",
                            ResponseDate = new DateTime(2022, 12, 29, 16, 31, 22, 187, DateTimeKind.Local).AddTicks(9960),
                            TypeOfCost = 0,
                            UpdatedDate = new DateTime(2022, 12, 30, 16, 31, 22, 187, DateTimeKind.Local).AddTicks(9959)
                        },
                        new
                        {
                            Id = 2,
                            ApprovalStatus = 2,
                            CreateDate = new DateTime(2022, 12, 30, 16, 31, 22, 187, DateTimeKind.Local).AddTicks(9972),
                            Damage = 1.0,
                            PersonId = "59323082792",
                            ReplyDate = new DateTime(2022, 12, 30, 16, 31, 22, 187, DateTimeKind.Local).AddTicks(9974),
                            ResponseDate = new DateTime(2021, 12, 30, 16, 31, 22, 187, DateTimeKind.Local).AddTicks(9973),
                            TypeOfCost = 1,
                            UpdatedDate = new DateTime(2022, 12, 30, 16, 31, 22, 187, DateTimeKind.Local).AddTicks(9973)
                        });
                });

            modelBuilder.Entity("HR_T3.Domain.Entities.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("AnnualPermit")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("Graduation")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastSurName")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDateOfWork")
                        .HasColumnType("datetime2");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Title")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "59323082791",
                            AccessFailedCount = 0,
                            Address = "adres kısmı",
                            AnnualPermit = 20,
                            Birthday = new DateTime(1989, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompanyId = 1,
                            ConcurrencyStamp = "5374efa0-a839-4364-b128-734d72803c07",
                            CreateDate = new DateTime(2022, 12, 30, 16, 31, 22, 177, DateTimeKind.Local).AddTicks(8063),
                            Department = 1,
                            Email = "fatmasenay.yilmazciftci@bilgeadamboost.com",
                            EmailConfirmed = true,
                            Gender = 0,
                            Graduation = 2,
                            IsActive = true,
                            LastSurName = "Çiftçi",
                            LockoutEnabled = false,
                            MiddleName = "Şenay",
                            Name = "Fatma",
                            NormalizedUserName = "FCIFTCI",
                            PasswordHash = "AQAAAAEAACcQAAAAEB/iK7xKNZszoisxnOUchhw+5klKdwwlHv8Wlx3W3lN1ILFOFioB+9a5GW24cETAGA==",
                            PhoneNumber = "12345678901",
                            PhoneNumberConfirmed = true,
                            Photo = "assets/images/PersonImages/3ff4d788-306e-401b-bb2e-5c61d6b6e5b6.png",
                            Salary = 25000.0,
                            SecurityStamp = "25fecca7-522c-4511-bfcd-a8c6e307b7bd",
                            StartDateOfWork = new DateTime(2017, 12, 30, 16, 31, 22, 177, DateTimeKind.Local).AddTicks(8153),
                            Surname = "Yılmaz",
                            Title = 1,
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2022, 12, 30, 16, 31, 22, 177, DateTimeKind.Local).AddTicks(8064),
                            UserName = "fciftci"
                        },
                        new
                        {
                            Id = "59323082792",
                            AccessFailedCount = 0,
                            Address = "adres kısmı",
                            AnnualPermit = 20,
                            Birthday = new DateTime(1992, 9, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CompanyId = 1,
                            ConcurrencyStamp = "80a44ad5-3fd4-4af5-a979-b17891aa4f87",
                            CreateDate = new DateTime(2022, 12, 30, 16, 31, 22, 182, DateTimeKind.Local).AddTicks(9101),
                            Department = 1,
                            Email = "yuksel.guzel@bilgeadamboost.com",
                            EmailConfirmed = true,
                            Gender = 0,
                            Graduation = 2,
                            IsActive = true,
                            LastSurName = "",
                            LockoutEnabled = false,
                            MiddleName = "",
                            Name = "Yüksel",
                            NormalizedUserName = "YGUZEL",
                            PasswordHash = "AQAAAAEAACcQAAAAEKYlcAFQPQqqy4QaFGtzpcna8ZTF+a3QE9pwkXxYxA47JX+3WGxgi6Y1vXH+DN03lw==",
                            PhoneNumber = "05065385385",
                            PhoneNumberConfirmed = true,
                            Photo = "assets/images/PersonImages/3ff4d788-306e-401b-bb2e-5c61d6b6e5b6.png",
                            Salary = 25000.0,
                            SecurityStamp = "1868cd15-953b-49f2-acd9-5a8a98beda92",
                            StartDateOfWork = new DateTime(2017, 12, 30, 16, 31, 22, 182, DateTimeKind.Local).AddTicks(9182),
                            Surname = "Güzel",
                            Title = 1,
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2022, 12, 30, 16, 31, 22, 182, DateTimeKind.Local).AddTicks(9101),
                            UserName = "yguzel"
                        });
                });

            modelBuilder.Entity("HR_T3.Domain.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin",
                            ConcurrencyStamp = "c5ec4f97-8d45-49af-b8af-668199126d3d",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "projectmanager",
                            ConcurrencyStamp = "dca37831-962d-4f43-b655-a58f4aa60317",
                            Name = "Project Manager",
                            NormalizedName = "PROJECT MANAGER"
                        },
                        new
                        {
                            Id = "employee",
                            ConcurrencyStamp = "e771204d-5073-47f1-9339-7e74b9b4be30",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "59323082791",
                            RoleId = "projectmanager"
                        },
                        new
                        {
                            UserId = "59323082792",
                            RoleId = "employee"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HR_T3.Domain.Entities.Cost", b =>
                {
                    b.HasOne("HR_T3.Domain.Entities.Person", "Person")
                        .WithMany("Costs")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("HR_T3.Domain.Entities.Person", b =>
                {
                    b.HasOne("HR_T3.Domain.Entities.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("HR_T3.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HR_T3.Domain.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HR_T3.Domain.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("HR_T3.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HR_T3.Domain.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HR_T3.Domain.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HR_T3.Domain.Entities.Company", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("HR_T3.Domain.Entities.Person", b =>
                {
                    b.Navigation("Costs");
                });
#pragma warning restore 612, 618
        }
    }
}
